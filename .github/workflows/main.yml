name: Deployment
on:
  push:
    environmentes:
      - main
      - develop
#
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Select Environment
        id: environment
        run: |
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo $COMMIT_MSG
          if [[ "$COMMIT_MSG" =~ (release|hotfix)/([0-9]+\.[0-9]+\.[0-9]+) && "${{ github.ref_name }}" == "main" ]]; then 
            echo "::set-output name=value::production"

          else
            echo "::set-output name=value::ci"
          fi
          if [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "::set-output name=value::staging"
          fi
      - name: Read Version
        id: version
        run: |
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo $COMMIT_MSG
          if [[ "${{ steps.environment.outputs.value }}" == "staging" ]]; then
            PACKAGE_VERSION="0.0.1"
            echo ::set-output name=value::$PACKAGE_VERSION
          elif [[ "${{ steps.environment.outputs.value }}" == "production" ]]; then
            if [[ "$COMMIT_MSG" =~ (release|hotfix)/([0-9]+\.[0-9]+\.[0-9]+) ]]; then 
              PACKAGE_VERSION="${BASH_REMATCH[2]}"
              echo ::set-output name=value::$PACKAGE_VERSION
            fi
          else
            PACKAGE_VERSION="0.0.0-abandoned"
            echo ::set-output name=value::$PACKAGE_VERSION
          fi
          echo $PACKAGE_VERSION
      - name: Check Version
        run: |
          if [[ "${{ steps.version.outputs.value  }}" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Version: ${{ steps.version.outputs.value  }}"
          else
            echo "Invalid Version: ${{ steps.version.outputs.value }}"
            exit 1
          fi
      - name: Check Code
        id: code
        run: echo ::set-output name=value::${{ github.run_id }}
      - name: Check Environment
        run: |
          if [[ "${{ steps.environment.outputs.value }}" != "staging" && "${{ steps.environment.outputs.value }}" != "production" && "${{ steps.environment.outputs.value }}" != "ci" ]]; then
            echo "Invalid Environment: ${{ steps.environment.outputs.value }}"
            exit 1
          fi
          echo "Target environment: ${{ steps.environment.outputs.value }}"
    outputs:
      version: ${{ steps.version.outputs.value  }}
      code: ${{ steps.code.outputs.value  }}
      environment: ${{ steps.environment.outputs.value  }}


  build:
    name: Build
    if: needs.prepare.outputs.environment != 'ci'
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Repository Owner to lowercase
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"


      - name: Create Web Stage Image
        if: needs.prepare.outputs.environment == 'staging'
        # uses: docker/build-push-action@v2
        # with:
        #   file: Dockerfile
        #   target: web
        #   context: .
        #   build-args: |
        #     "APP_ENVIRONMENT=staging"
        #     "APP_VERSION_CODE=${{needs.prepare.outputs.code}}"
        #     "APP_VERSION_NAME=$${{needs.prepare.outputs.version}}"
        #   tags: ghcr.io/${{ env.OWNER_LC }}/web-stg:${{ needs.prepare.outputs.version }}, ghcr.io/${{ env.OWNER_LC }}/web-stg:latest
        #   push: true
        run: echo "APP_ENVIRONMENT=stage APP_VERSION_CODE=${{needs.prepare.outputs.code}} APP_VERSION_NAME=${{needs.prepare.outputs.version}}"
      - name: Create Web Prod Image
        if: needs.prepare.outputs.environment == 'production' && needs.prepare.outputs.condition == 'production'
        # uses: docker/build-push-action@v2
        # with:
        #   file: Dockerfile
        #   target: web
        #   context: .
        #   build-args: |
        #     "APP_ENVIRONMENT=production"
        #     "APP_VERSION_CODE=${{needs.prepare.outputs.code}}"
        #     "APP_VERSION_NAME=${{needs.prepare.outputs.version}}"
        #   tags: ghcr.io/${{ env.OWNER_LC }}/web-prod:${{ needs.prepare.outputs.version }}, ghcr.io/${{ env.OWNER_LC }}/web-prod:latest
        #   push: true
        run: echo "APP_ENVIRONMENT=production APP_VERSION_CODE=${{needs.prepare.outputs.code}} APP_VERSION_NAME=${{needs.prepare.outputs.version}}"



  rollout:
    name: Rollout
    if: needs.prepare.outputs.condition != 'ci'
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Kubernetes staging context
        if: needs.prepare.outputs.environment == 'staging'
        run: echo "start staging"

      - name: Kubernetes production context
        if: needs.prepare.outputs.environment == 'production'
        run: echo "start production"

      - name: Apply new workflow configurations
        run: echo "Start for All"

      - name: Rollout
        run: echo "Start for All"

      - name: Check Pods
        run: echo "Start for all"




name: Deployment
on:
  push:
    environmentes:
      - main
      - development
      - build/cicd

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Select Environment
        id: environment
        run: |
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo $COMMIT_MSG
          if [[  "$COMMIT_MSG" == *"_ci"* ]]; then
            echo "::set-output name=condition::ci"
          fi
          if [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "::set-output name=value::staging"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "::set-output name=value::production"
          elif [[ "${{ github.ref_name }}" == "build/cicd" ]]; then
            echo "::set-output name=value::staging"
          else 
            echo "Not targeted branch"
          fi
      - name: Read Version
        id: version
        run: |
          if [[ "${{ steps.environment.outputs.value }}" != "staging" ]]; then
            PACKAGE_VERSION="0.0.1"
            echo ::set-output name=value::$PACKAGE_VERSION-${{ github.run_id }}
          elif
            PACKAGE_VERSION=$(sh bin/extract_version_name)
            echo ::set-output name=value::$PACKAGE_VERSION
          else
            echo "Wo deployed version"
          fi
      - name: Check Version
        run: |
          if [[ "${{ steps.version.outputs.value  }}" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Version: ${{ steps.version.outputs.value  }}"
          else
            echo "Invalid Version: ${{ steps.version.outputs.value }}"
            exit 1
          fi
      - name: Check Environment
        run: |
          if [[ "${{ steps.environment.outputs.value }}" != "staging" && "${{ steps.environment.outputs.value }}" != "production" ]]; then
            echo "Invalid Environment: ${{ steps.environment.outputs.value }}"
            exit 1
          fi
          echo "Target environment: ${{ steps.environment.outputs.value }}"
          echo "Condition:  ${{ steps.environment.outputs.condition }}"
    outputs:
      version: ${{ steps.version.outputs.value  }}
      environment: ${{ steps.environment.outputs.value  }}
      condition: ${{ steps.environment.outputs.condition  }}


  build:
    name: Build
    if: needs.prepare.outputs.condition != 'ci'
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Repository Owner to lowercase
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"


      - name: Create Web Stage Image
        if: needs.prepare.outputs.environment == 'staging'
        run: echo "start staging"
      - name: Create Web Prod Image
        if: needs.prepare.outputs.environment == 'production'
        run: echo "start production"

  rollout:
    name: Rollout
    if: needs.prepare.outputs.condition != 'ci'
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Kubernetes staging context
        if: needs.prepare.outputs.environment == 'staging'
        run: echo "start staging"

      - name: Kubernetes production context
        if: needs.prepare.outputs.environment == 'production'
        run: echo "start production"

      - name: Apply new workflow configurations
        run: echo "Start for All"

      - name: Rollout
        run: echo "Start for All"

      - name: Check Pods
        run: echo "Start for all"



